{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Husk",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#use-statements"
    },
    {
      "include": "#struct-enum"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.husk",
          "match": "//.*$"
        },
        {
          "name": "comment.block.husk",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.husk",
          "match": "\\b(if|else|match|for|while|loop|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.husk",
          "match": "\\b(let|fn|struct|enum|impl|self|use)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.husk",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.husk",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.husk",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.husk",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.husk",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.husk",
          "match": "\\b(int|float|bool|string)\\b"
        },
        {
          "name": "entity.name.type.husk",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.husk",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\s*(?=\\()"
        },
        {
          "name": "support.function.builtin.husk",
          "match": "\\b(println)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.husk",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.assignment.compound.husk",
          "match": "[+\\-*/%]="
        },
        {
          "name": "keyword.operator.assignment.husk",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.husk",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.husk",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.range.husk",
          "match": "\\.\\.=?"
        },
        {
          "name": "keyword.operator.path.husk",
          "match": "::"
        }
      ]
    },
    "use-statements": {
      "patterns": [
        {
          "name": "meta.use.husk",
          "begin": "\\b(use)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.use.husk"
            }
          },
          "end": ";",
          "patterns": [
            {
              "name": "entity.name.namespace.husk",
              "match": "\\b(local)\\b"
            },
            {
              "name": "entity.name.namespace.husk",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "struct-enum": {
      "patterns": [
        {
          "name": "meta.struct.husk",
          "begin": "\\b(struct)\\s+([A-Z][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.struct.husk"
            },
            "2": {
              "name": "entity.name.type.struct.husk"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
              "captures": {
                "1": {
                  "name": "variable.other.member.husk"
                },
                "2": {
                  "name": "support.type.husk"
                }
              }
            },
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "meta.enum.husk",
          "begin": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.enum.husk"
            },
            "2": {
              "name": "entity.name.type.enum.husk"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
              "name": "entity.name.type.variant.husk"
            },
            {
              "include": "#types"
            },
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "meta.impl.husk",
          "begin": "\\b(impl)\\s+([A-Z][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.impl.husk"
            },
            "2": {
              "name": "entity.name.type.husk"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.husk"
}