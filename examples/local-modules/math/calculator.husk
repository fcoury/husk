// Calculator utility module

pub enum Operation {
    Add,
    Subtract,
    Multiply,
    Divide,
    Power,
}

pub struct Calculator {
    precision: int,
    history: Vec<string>,
}

impl Calculator {
    pub fn new() -> Calculator {
        Calculator {
            precision: 2,
            history: Vec::new(),
        }
    }
    
    pub fn with_precision(precision: int) -> Calculator {
        Calculator {
            precision,
            history: Vec::new(),
        }
    }
    
    pub fn calculate(&mut self, op: Operation, a: float, b: float) -> float {
        let result = match op {
            Operation::Add => a + b,
            Operation::Subtract => a - b,
            Operation::Multiply => a * b,
            Operation::Divide => {
                if b == 0.0 {
                    // In practice, would return Result<float, Error>
                    println("Error: Division by zero");
                    return 0.0;
                }
                a / b
            },
            Operation::Power => self.power(a, b),
        };
        
        // Record operation in history
        let op_str = self.operation_to_string(op);
        let history_entry = format!("{} {} {} = {}", a, op_str, b, result);
        self.history.push(history_entry);
        
        return self.round_to_precision(result);
    }
    
    pub fn get_history(&self) -> Vec<string> {
        return self.history.clone();
    }
    
    pub fn clear_history(&mut self) {
        self.history.clear();
    }
    
    pub fn factorial(&self, n: int) -> int {
        if n <= 1 {
            return 1;
        }
        return n * self.factorial(n - 1);
    }
    
    pub fn square_root(&self, n: float) -> float {
        if n < 0.0 {
            println("Error: Cannot calculate square root of negative number");
            return 0.0;
        }
        
        // Simple approximation - in practice would use more sophisticated method
        let mut guess = n / 2.0;
        let tolerance = 0.0001;
        
        while (guess * guess - n).abs() > tolerance {
            guess = (guess + n / guess) / 2.0;
        }
        
        return self.round_to_precision(guess);
    }
    
    fn power(&self, base: float, exponent: float) -> float {
        // Simplified power function - in practice would handle edge cases
        if exponent == 0.0 {
            return 1.0;
        }
        
        if exponent == 1.0 {
            return base;
        }
        
        // For integer exponents, use simple multiplication
        if exponent == (exponent as int) as float && exponent > 0.0 {
            let exp_int = exponent as int;
            let mut result = 1.0;
            let mut i = 0;
            while i < exp_int {
                result = result * base;
                i = i + 1;
            }
            return result;
        }
        
        // For other cases, return approximation
        return base * exponent; // Simplified
    }
    
    fn operation_to_string(&self, op: Operation) -> string {
        match op {
            Operation::Add => "+",
            Operation::Subtract => "-",
            Operation::Multiply => "*",
            Operation::Divide => "/",
            Operation::Power => "^",
        }
    }
    
    fn round_to_precision(&self, value: float) -> float {
        // Simple rounding to specified decimal places
        let multiplier = self.power(10.0, self.precision as float);
        return ((value * multiplier + 0.5) as int) as float / multiplier;
    }
}