
extern mod fs {
    type PathLike;
    type PathOrFileDescriptor;
    type TimeLike;
    type NoParamCallback;
    type BufferEncodingOption;
    type ObjectEncodingOptions;
    type EncodingOption;
    type OpenMode;
    type Mode;
    type StatsBase;
    type Stats;
    type StatsFsBase;
    type StatsFs;
    type BigIntStatsFs;
    type StatFsOptions;
    type StatWatcher;
    type FSWatcher;
    type ReadStreamEvents;
    type CustomEvents;
    type WriteStreamEvents;
    type StatSyncFn;
    type RmDirOptions;
    type RmOptions;
    type MakeDirectoryOptions;
    type WriteOptions;
    type ReadPosition;
    type ReadSyncOptions;
    type ReadAsyncOptions;
    type WriteFileOptions;
    type WatchFileOptions;
    type WatchOptions;
    type WatchEventType;
    type WatchListener;
    type StatsListener;
    type BigIntStatsListener;
    type StreamOptions;
    type FSImplementation;
    type CreateReadStreamFSImplementation;
    type CreateWriteStreamFSImplementation;
    type ReadStreamOptions;
    type WriteStreamOptions;
    type WriteVResult;
    type ReadVResult;
    type OpenAsBlobOptions;
    type OpenDirOptions;
    type BigIntStats;
    type BigIntOptions;
    type StatOptions;
    type StatSyncOptions;
    type CopyOptionsBase;
    type CopyOptions;
    type CopySyncOptions;
    type _GlobOptions;
    type GlobOptions;
    type GlobOptionsWithFileTypes;
    type GlobOptionsWithoutFileTypes;

    fn rename(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback);
    fn renameSync(oldPath: PathLike, newPath: PathLike);
    fn truncate(path: PathLike, len: any, callback: NoParamCallback);
    fn truncate(path: PathLike, callback: NoParamCallback);
    fn truncateSync(path: PathLike, len: i32);
    fn ftruncate(fd: i32, len: any, callback: NoParamCallback);
    fn ftruncate(fd: i32, callback: NoParamCallback);
    fn ftruncateSync(fd: i32, len: i32);
    fn chown(path: PathLike, uid: i32, gid: i32, callback: NoParamCallback);
    fn chownSync(path: PathLike, uid: i32, gid: i32);
    fn fchown(fd: i32, uid: i32, gid: i32, callback: NoParamCallback);
    fn fchownSync(fd: i32, uid: i32, gid: i32);
    fn lchown(path: PathLike, uid: i32, gid: i32, callback: NoParamCallback);
    fn lchownSync(path: PathLike, uid: i32, gid: i32);
    fn lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback);
    fn lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike);
    fn chmod(path: PathLike, mode: Mode, callback: NoParamCallback);
    fn chmodSync(path: PathLike, mode: Mode);
    fn fchmod(fd: i32, mode: Mode, callback: NoParamCallback);
    fn fchmodSync(fd: i32, mode: Mode);
    fn lchmod(path: PathLike, mode: Mode, callback: NoParamCallback);
    fn lchmodSync(path: PathLike, mode: Mode);
    fn stat(path: PathLike, callback: any);
    fn stat(path: PathLike, options: any, callback: any);
    fn stat(path: PathLike, options: any, callback: any);
    fn stat(path: PathLike, options: any, callback: any);
    fn fstat(fd: i32, callback: any);
    fn fstat(fd: i32, options: any, callback: any);
    fn fstat(fd: i32, options: any, callback: any);
    fn fstat(fd: i32, options: any, callback: any);
    fn fstatSync(fd: i32, options: any) -> Stats;
    fn fstatSync(fd: i32, options: any) -> BigIntStats;
    fn fstatSync(fd: i32, options: StatOptions) -> any;
    fn lstat(path: PathLike, callback: any);
    fn lstat(path: PathLike, options: any, callback: any);
    fn lstat(path: PathLike, options: any, callback: any);
    fn lstat(path: PathLike, options: any, callback: any);
    fn statfs(path: PathLike, callback: any);
    fn statfs(path: PathLike, options: any, callback: any);
    fn statfs(path: PathLike, options: any, callback: any);
    fn statfs(path: PathLike, options: any, callback: any);
    fn statfsSync(path: PathLike, options: any) -> StatsFs;
    fn statfsSync(path: PathLike, options: any) -> BigIntStatsFs;
    fn statfsSync(path: PathLike, options: StatFsOptions) -> any;
    fn link(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback);
    fn linkSync(existingPath: PathLike, newPath: PathLike);
    fn symlink(target: PathLike, path: PathLike, type_: any, callback: NoParamCallback);
    fn symlink(target: PathLike, path: PathLike, callback: NoParamCallback);
    fn symlinkSync(target: PathLike, path: PathLike, type_: any);
    fn readlink(path: PathLike, options: EncodingOption, callback: any);
    fn readlink(path: PathLike, options: BufferEncodingOption, callback: any);
    fn readlink(path: PathLike, options: EncodingOption, callback: any);
    fn readlink(path: PathLike, callback: any);
    fn readlinkSync(path: PathLike, options: EncodingOption) -> string;
    fn readlinkSync(path: PathLike, options: BufferEncodingOption) -> Buffer;
    fn readlinkSync(path: PathLike, options: EncodingOption) -> any;
    fn realpath(path: PathLike, options: EncodingOption, callback: any);
    fn realpath(path: PathLike, options: BufferEncodingOption, callback: any);
    fn realpath(path: PathLike, options: EncodingOption, callback: any);
    fn realpath(path: PathLike, callback: any);
    fn realpathSync(path: PathLike, options: EncodingOption) -> string;
    fn realpathSync(path: PathLike, options: BufferEncodingOption) -> Buffer;
    fn realpathSync(path: PathLike, options: EncodingOption) -> any;
    fn unlink(path: PathLike, callback: NoParamCallback);
    fn unlinkSync(path: PathLike);
    fn rmdir(path: PathLike, callback: NoParamCallback);
    fn rmdir(path: PathLike, options: RmDirOptions, callback: NoParamCallback);
    fn rmdirSync(path: PathLike, options: RmDirOptions);
    fn rm(path: PathLike, callback: NoParamCallback);
    fn rm(path: PathLike, options: RmOptions, callback: NoParamCallback);
    fn rmSync(path: PathLike, options: RmOptions);
    fn mkdir(path: PathLike, options: any, callback: any);
    fn mkdir(path: PathLike, options: any, callback: NoParamCallback);
    fn mkdir(path: PathLike, options: any, callback: any);
    fn mkdir(path: PathLike, callback: NoParamCallback);
    fn mkdirSync(path: PathLike, options: any) -> any;
    fn mkdirSync(path: PathLike, options: any);
    fn mkdirSync(path: PathLike, options: any) -> any;
    fn mkdtemp(prefix: string, options: EncodingOption, callback: any);
    fn mkdtemp(prefix: string, options: any, callback: any);
    fn mkdtemp(prefix: string, options: EncodingOption, callback: any);
    fn mkdtemp(prefix: string, callback: any);
    fn mkdtempSync(prefix: string, options: EncodingOption) -> string;
    fn mkdtempSync(prefix: string, options: BufferEncodingOption) -> Buffer;
    fn mkdtempSync(prefix: string, options: EncodingOption) -> any;
    fn readdir(path: PathLike, options: any, callback: any);
    fn readdir(path: PathLike, options: any, callback: any);
    fn readdir(path: PathLike, options: any, callback: any);
    fn readdir(path: PathLike, callback: any);
    fn readdir(path: PathLike, options: any, callback: any);
    fn readdir(path: PathLike, options: any, callback: any);
    fn readdirSync(path: PathLike, options: any) -> Vec<string>;
    fn readdirSync(path: PathLike, options: any) -> Vec<Buffer>;
    fn readdirSync(path: PathLike, options: any) -> any;
    fn readdirSync(path: PathLike, options: any) -> Vec<Dirent>;
    fn readdirSync(path: PathLike, options: any) -> Vec<Dirent>;
    fn close(fd: i32, callback: NoParamCallback);
    fn closeSync(fd: i32);
    fn open(path: PathLike, flags: any, mode: any, callback: any);
    fn open(path: PathLike, flags: any, callback: any);
    fn open(path: PathLike, callback: any);
    fn openSync(path: PathLike, flags: OpenMode, mode: any) -> i32;
    fn utimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback);
    fn utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike);
    fn futimes(fd: i32, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback);
    fn futimesSync(fd: i32, atime: TimeLike, mtime: TimeLike);
    fn fsync(fd: i32, callback: NoParamCallback);
    fn fsyncSync(fd: i32);
    fn write(fd: i32, buffer: TBuffer, offset: any, length: any, position: any, callback: any);
    fn write(fd: i32, buffer: TBuffer, offset: any, length: any, callback: any);
    fn write(fd: i32, buffer: TBuffer, offset: any, callback: any);
    fn write(fd: i32, buffer: TBuffer, callback: any);
    fn write(fd: i32, buffer: TBuffer, options: WriteOptions, callback: any);
    fn write(fd: i32, string_: string, position: any, encoding: any, callback: any);
    fn write(fd: i32, string_: string, position: any, callback: any);
    fn write(fd: i32, string_: string, callback: any);
    fn writeSync(fd: i32, buffer: NodeJS::ArrayBufferView, offset: any, length: any, position: any) -> i32;
    fn writeSync(fd: i32, string_: string, position: any, encoding: any) -> i32;
    fn read(fd: i32, buffer: TBuffer, offset: i32, length: i32, position: any, callback: any);
    fn read(fd: i32, options: ReadAsyncOptions, callback: any);
    fn read(fd: i32, buffer: TBuffer, options: ReadSyncOptions, callback: any);
    fn read(fd: i32, buffer: TBuffer, callback: any);
    fn read(fd: i32, callback: any);
    fn readSync(fd: i32, buffer: NodeJS::ArrayBufferView, offset: i32, length: i32, position: any) -> i32;
    fn readSync(fd: i32, buffer: NodeJS::ArrayBufferView, opts: ReadSyncOptions) -> i32;
    fn readFile(path: PathOrFileDescriptor, options: any, callback: any);
    fn readFile(path: PathOrFileDescriptor, options: any, callback: any);
    fn readFile(path: PathOrFileDescriptor, options: any, callback: any);
    fn readFile(path: PathOrFileDescriptor, callback: any);
    fn readFileSync(path: PathOrFileDescriptor, options: any) -> NonSharedBuffer;
    fn readFileSync(path: PathOrFileDescriptor, options: any) -> string;
    fn readFileSync(path: PathOrFileDescriptor, options: any) -> any;
    fn writeFile(file: PathOrFileDescriptor, data: any, options: WriteFileOptions, callback: NoParamCallback);
    fn writeFile(path: PathOrFileDescriptor, data: any, callback: NoParamCallback);
    fn writeFileSync(file: PathOrFileDescriptor, data: any, options: WriteFileOptions);
    fn appendFile(path: PathOrFileDescriptor, data: any, options: WriteFileOptions, callback: NoParamCallback);
    fn appendFile(file: PathOrFileDescriptor, data: any, callback: NoParamCallback);
    fn appendFileSync(path: PathOrFileDescriptor, data: any, options: WriteFileOptions);
    fn watchFile(filename: PathLike, options: any, listener: StatsListener) -> StatWatcher;
    fn watchFile(filename: PathLike, options: any, listener: BigIntStatsListener) -> StatWatcher;
    fn watchFile(filename: PathLike, listener: StatsListener) -> StatWatcher;
    fn unwatchFile(filename: PathLike, listener: StatsListener);
    fn unwatchFile(filename: PathLike, listener: BigIntStatsListener);
    fn watch(filename: PathLike, options: any, listener: WatchListener) -> FSWatcher;
    fn watch(filename: PathLike, options: any, listener: WatchListener) -> FSWatcher;
    fn watch(filename: PathLike, options: any, listener: WatchListener) -> FSWatcher;
    fn watch(filename: PathLike, listener: WatchListener) -> FSWatcher;
    fn exists(path: PathLike, callback: any);
    fn existsSync(path: PathLike) -> bool;
    fn access(path: PathLike, mode: any, callback: NoParamCallback);
    fn access(path: PathLike, callback: NoParamCallback);
    fn accessSync(path: PathLike, mode: i32);
    fn createReadStream(path: PathLike, options: any) -> ReadStream;
    fn createWriteStream(path: PathLike, options: any) -> WriteStream;
    fn fdatasync(fd: i32, callback: NoParamCallback);
    fn fdatasyncSync(fd: i32);
    fn copyFile(src: PathLike, dest: PathLike, callback: NoParamCallback);
    fn copyFile(src: PathLike, dest: PathLike, mode: i32, callback: NoParamCallback);
    fn copyFileSync(src: PathLike, dest: PathLike, mode: i32);
    fn writev(fd: i32, buffers: any, cb: any);
    fn writev(fd: i32, buffers: any, position: any, cb: any);
    fn writevSync(fd: i32, buffers: any, position: i32) -> i32;
    fn readv(fd: i32, buffers: any, cb: any);
    fn readv(fd: i32, buffers: any, position: any, cb: any);
    fn readvSync(fd: i32, buffers: any, position: i32) -> i32;
    fn openAsBlob(path: PathLike, options: OpenAsBlobOptions) -> Promise;
    fn opendirSync(path: PathLike, options: OpenDirOptions) -> Dir;
    fn opendir(path: PathLike, cb: any);
    fn opendir(path: PathLike, options: OpenDirOptions, cb: any);
    fn cp(source: any, destination: any, callback: any);
    fn cp(source: any, destination: any, opts: CopyOptions, callback: any);
    fn cpSync(source: any, destination: any, opts: CopySyncOptions);
    fn glob(pattern: any, callback: any);
    fn glob(pattern: any, options: GlobOptionsWithFileTypes, callback: any);
    fn glob(pattern: any, options: GlobOptionsWithoutFileTypes, callback: any);
    fn glob(pattern: any, options: GlobOptions, callback: any);
    fn globSync(pattern: any) -> Vec<string>;
    fn globSync(pattern: any, options: GlobOptionsWithFileTypes) -> Vec<Dirent>;
    fn globSync(pattern: any, options: GlobOptionsWithoutFileTypes) -> Vec<string>;
    fn globSync(pattern: any, options: GlobOptions) -> any;
    fn statSync() -> StatSyncFn;
    fn lstatSync() -> StatSyncFn;
}
