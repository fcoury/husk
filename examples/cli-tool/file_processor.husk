// File processing utilities and transformations

use fs::promises::{readFile, writeFile, readdir, stat, mkdir};
use path::{join, extname, basename, dirname, resolve};
use local::utils::{Logger, LogLevel};

extern type Buffer;
extern type Stats;

pub struct ProcessingOptions {
    pub minify: bool,
    pub transform_type: Option<string>,
    pub file_filter: Option<string>,
    pub verbose: bool,
    pub preserve_structure: bool,
}

impl ProcessingOptions {
    pub fn default() -> ProcessingOptions {
        ProcessingOptions {
            minify: false,
            transform_type: None,
            file_filter: None,
            verbose: false,
            preserve_structure: true,
        }
    }
    
    pub fn with_minify() -> ProcessingOptions {
        let mut options = Self::default();
        options.minify = true;
        options
    }
    
    pub fn with_transform(transform_type: string) -> ProcessingOptions {
        let mut options = Self::default();
        options.transform_type = Some(transform_type);
        options
    }
    
    pub fn should_process_file(&self, file_path: string) -> bool {
        match &self.file_filter {
            Some(pattern) => self.matches_pattern(file_path, pattern.clone()),
            None => true,
        }
    }
    
    fn matches_pattern(&self, file_path: string, pattern: string) -> bool {
        // Simple pattern matching - in practice would use glob or regex
        if pattern.starts_with("*.") {
            let ext = pattern.substring(1, pattern.len()); // Remove *
            return file_path.ends_with(ext);
        }
        
        if pattern.contains("*") {
            // More complex pattern matching would go here
            return true;
        }
        
        file_path.contains(pattern)
    }
}

pub struct FileProcessor {
    options: ProcessingOptions,
    processed_count: int,
    skipped_count: int,
    error_count: int,
}

impl FileProcessor {
    pub fn new(options: ProcessingOptions) -> FileProcessor {
        FileProcessor {
            options,
            processed_count: 0,
            skipped_count: 0,
            error_count: 0,
        }
    }
    
    pub async fn process_file(
        &mut self, 
        input_path: string, 
        output_path: string, 
        logger: &Logger
    ) -> Result<(), string> {
        if self.options.verbose {
            logger.debug(format!("Processing file: {} -> {}", input_path, output_path));
        }
        
        if !self.options.should_process_file(input_path.clone()) {
            self.skipped_count = self.skipped_count + 1;
            if self.options.verbose {
                logger.debug(format!("Skipped (filter): {}", input_path));
            }
            return Ok(());
        }
        
        match self.process_single_file(input_path.clone(), output_path.clone()).await {
            Ok(_) => {
                self.processed_count = self.processed_count + 1;
                if self.options.verbose {
                    logger.info(format!("Processed: {}", basename(input_path)));
                }
                Ok(())
            },
            Err(error) => {
                self.error_count = self.error_count + 1;
                logger.error(format!("Failed to process {}: {}", input_path, error));
                Err(error)
            }
        }
    }
    
    pub async fn process_directory(
        &mut self, 
        input_dir: string, 
        output_dir: string, 
        logger: &Logger
    ) -> Result<(), string> {
        logger.info(format!("Processing directory: {}", input_dir));
        
        // Ensure output directory exists
        self.ensure_output_directory(output_dir.clone()).await?;
        
        let files = readdir(input_dir.clone()).await?;
        
        for file in files {
            let input_file_path = join(input_dir.clone(), file.clone());
            let output_file_path = join(output_dir.clone(), file.clone());
            
            let file_stats = stat(input_file_path.clone()).await?;
            
            if file_stats.isFile() {
                // Process individual file
                match self.process_file(input_file_path, output_file_path, logger).await {
                    Ok(_) => {},
                    Err(_) => {
                        // Continue processing other files even if one fails
                        continue;
                    }
                }
            } else {
                if file_stats.isDirectory() && self.options.preserve_structure {
                    // Recursively process subdirectory
                    self.process_directory(input_file_path, output_file_path, logger).await?;
                }
            }
        }
        
        self.log_processing_summary(logger);
        Ok(())
    }
    
    async fn process_single_file(
        &self, 
        input_path: string, 
        output_path: string
    ) -> Result<(), string> {
        // Read input file
        let content = readFile(input_path.clone(), "utf8").await?;
        
        // Apply transformations
        let processed_content = self.apply_transformations(content, input_path.clone())?;
        
        // Ensure output directory exists
        let output_dir = dirname(output_path.clone());
        self.ensure_output_directory(output_dir).await?;
        
        // Write output file
        writeFile(output_path, processed_content, "utf8").await?;
        
        Ok(())
    }
    
    fn apply_transformations(&self, content: string, file_path: string) -> Result<string, string> {
        let mut result = content;
        
        // Apply transform based on file type or explicit option
        let file_ext = extname(file_path);
        let transform_type = self.options.transform_type.clone().unwrap_or(file_ext);
        
        match transform_type.as_str() {
            ".js" | "js" => {
                result = self.transform_javascript(result)?;
            },
            ".css" | "css" => {
                result = self.transform_css(result)?;
            },
            ".html" | "html" => {
                result = self.transform_html(result)?;
            },
            ".json" | "json" => {
                result = self.transform_json(result)?;
            },
            _ => {
                // No transformation for unknown file types
            }
        }
        
        // Apply minification if requested
        if self.options.minify {
            result = self.minify_content(result, transform_type)?;
        }
        
        Ok(result)
    }
    
    fn transform_javascript(&self, content: string) -> Result<string, string> {
        // Simple JavaScript transformations
        let mut result = content;
        
        // Add "use strict" if not present
        if !result.contains("use strict") {
            result = format!("'use strict';\n{}", result);
        }
        
        // Simple variable name transformations (demo purposes)
        result = result.replace("var ", "let ");
        
        Ok(result)
    }
    
    fn transform_css(&self, content: string) -> Result<string, string> {
        // Simple CSS transformations
        let mut result = content;
        
        // Add vendor prefixes for common properties (simplified)
        result = result.replace("transform:", "-webkit-transform: ; transform:");
        result = result.replace("transition:", "-webkit-transition: ; transition:");
        
        Ok(result)
    }
    
    fn transform_html(&self, content: string) -> Result<string, string> {
        // Simple HTML transformations
        let mut result = content;
        
        // Add DOCTYPE if not present
        if !result.to_lowercase().contains("<!doctype") {
            result = format!("<!DOCTYPE html>\n{}", result);
        }
        
        Ok(result)
    }
    
    fn transform_json(&self, content: string) -> Result<string, string> {
        // Validate and format JSON
        // In practice would use JSON.parse and JSON.stringify
        let trimmed = content.trim();
        if !trimmed.starts_with("{") && !trimmed.starts_with("[") {
            return Err("Invalid JSON format");
        }
        
        Ok(trimmed.to_string())
    }
    
    fn minify_content(&self, content: string, file_type: string) -> Result<string, string> {
        // Simple minification (remove extra whitespace and comments)
        let mut result = content;
        
        match file_type.as_str() {
            ".js" | "js" => {
                // Remove single-line comments
                result = self.remove_js_comments(result);
                // Remove extra whitespace
                result = self.compress_whitespace(result);
            },
            ".css" | "css" => {
                // Remove CSS comments
                result = self.remove_css_comments(result);
                // Remove extra whitespace
                result = self.compress_whitespace(result);
            },
            ".html" | "html" => {
                // Remove HTML comments
                result = self.remove_html_comments(result);
                // Remove extra whitespace between tags
                result = self.compress_html_whitespace(result);
            },
            _ => {
                // Generic whitespace compression
                result = self.compress_whitespace(result);
            }
        }
        
        Ok(result)
    }
    
    fn remove_js_comments(&self, content: string) -> string {
        // Simple comment removal (doesn't handle all edge cases)
        let lines = content.split("\n");
        let mut result_lines = Vec::new();
        
        for line in lines {
            let trimmed = line.trim();
            if !trimmed.starts_with("//") {
                result_lines.push(line);
            }
        }
        
        result_lines.join("\n")
    }
    
    fn remove_css_comments(&self, content: string) -> string {
        // Remove CSS /* */ comments (simplified)
        content.replace("/*", "").replace("*/", "")
    }
    
    fn remove_html_comments(&self, content: string) -> string {
        // Remove HTML <!-- --> comments (simplified)
        content.replace("<!--", "").replace("-->", "")
    }
    
    fn compress_whitespace(&self, content: string) -> string {
        // Replace multiple whitespace with single space
        content.split_whitespace().join(" ").trim()
    }
    
    fn compress_html_whitespace(&self, content: string) -> string {
        // More aggressive HTML whitespace compression
        content.replace(">\s+<", "><").trim()
    }
    
    async fn ensure_output_directory(&self, dir_path: string) -> Result<(), string> {
        mkdir(dir_path, { recursive: true }).await?;
        Ok(())
    }
    
    fn log_processing_summary(&self, logger: &Logger) {
        logger.info("Processing Summary:");
        logger.info(format!("  Processed: {} files", self.processed_count));
        logger.info(format!("  Skipped: {} files", self.skipped_count));
        logger.info(format!("  Errors: {} files", self.error_count));
        
        let total = self.processed_count + self.skipped_count + self.error_count;
        if total > 0 {
            let success_rate = (self.processed_count * 100) / total;
            logger.info(format!("  Success rate: {}%", success_rate));
        }
    }
}

// Utility functions for file operations
pub async fn get_file_info(file_path: string) -> Result<FileInfo, string> {
    let stats = stat(file_path.clone()).await?;
    
    Ok(FileInfo {
        path: file_path.clone(),
        name: basename(file_path.clone()),
        extension: extname(file_path),
        size: stats.size,
        is_file: stats.isFile(),
        is_directory: stats.isDirectory(),
        modified_time: stats.mtime,
    })
}

pub struct FileInfo {
    pub path: string,
    pub name: string,
    pub extension: string,
    pub size: int,
    pub is_file: bool,
    pub is_directory: bool,
    pub modified_time: string, // In practice would be Date type
}

impl FileInfo {
    pub fn display(&self) -> string {
        let file_type = if self.is_file { "file" } else { "directory" };
        format!("{} ({}, {} bytes)", self.name, file_type, self.size)
    }
}