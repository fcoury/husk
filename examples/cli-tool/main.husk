// CLI File Processing Tool - Demonstrates Node.js API usage in Husk

use fs::promises::{readFile, writeFile, access, mkdir, readdir, stat};
use fs::constants::F_OK;
use path::{join, extname, basename, dirname};
use process::Process;
use local::cli::{CliArgs, Command};
use local::file_processor::{FileProcessor, ProcessingOptions};
use local::utils::{Logger, LogLevel};

extern type Buffer;
extern type Stats;

pub async fn main() -> Result<(), string> {
    let logger = Logger::new(LogLevel::Info);
    logger.info("Starting Husk CLI File Processor");
    
    // Parse command line arguments
    let args = parse_args(Process.argv)?;
    
    match args.command {
        Command::Process { input, output, options } => {
            process_files(input, output, options, &logger).await
        },
        Command::Analyze { path } => {
            analyze_directory(path, &logger).await
        },
        Command::Watch { directory } => {
            watch_directory(directory, &logger).await
        },
        Command::Help => {
            show_help();
            Ok(())
        },
    }
}

async fn process_files(
    input: string, 
    output: string, 
    options: ProcessingOptions,
    logger: &Logger
) -> Result<(), string> {
    logger.info(format!("Processing files from {} to {}", input, output));
    
    // Check if input exists
    let input_exists = check_file_exists(input.clone()).await?;
    if !input_exists {
        return Err(format!("Input path does not exist: {}", input));
    }
    
    // Ensure output directory exists
    let output_dir = dirname(output.clone());
    ensure_directory_exists(output_dir).await?;
    
    let processor = FileProcessor::new(options);
    
    // Get file stats to determine if input is file or directory
    let input_stats = stat(input.clone()).await?;
    
    if input_stats.isFile() {
        // Process single file
        processor.process_file(input, output, logger).await
    } else {
        if input_stats.isDirectory() {
            // Process directory
            processor.process_directory(input, output, logger).await
        } else {
            Err("Input path is neither file nor directory")
        }
    }
}

async fn analyze_directory(path: string, logger: &Logger) -> Result<(), string> {
    logger.info(format!("Analyzing directory: {}", path));
    
    let exists = check_file_exists(path.clone()).await?;
    if !exists {
        return Err(format!("Directory does not exist: {}", path));
    }
    
    let stats = stat(path.clone()).await?;
    if !stats.isDirectory() {
        return Err(format!("Path is not a directory: {}", path));
    }
    
    let files = readdir(path.clone()).await?;
    let mut analysis = DirectoryAnalysis::new();
    
    for file in files {
        let file_path = join(path.clone(), file);
        let file_stats = stat(file_path.clone()).await?;
        
        if file_stats.isFile() {
            let ext = extname(file_path.clone());
            analysis.add_file(ext, file_stats.size);
        } else {
            if file_stats.isDirectory() {
                analysis.add_directory();
            }
        }
    }
    
    print_analysis_results(analysis, logger);
    Ok(())
}

async fn watch_directory(directory: string, logger: &Logger) -> Result<(), string> {
    logger.info(format!("Watching directory for changes: {}", directory));
    
    let exists = check_file_exists(directory.clone()).await?;
    if !exists {
        return Err(format!("Directory does not exist: {}", directory));
    }
    
    // In a real implementation, would use fs.watch or chokidar
    logger.info("File watching not fully implemented - would monitor for changes");
    logger.info("Use Ctrl+C to stop watching");
    
    // Simulate watching (in practice would set up actual file system watchers)
    let mut count = 0;
    while count < 10 {
        // Wait 2 seconds (simulated)
        await_timeout(2000).await;
        logger.debug(format!("Checking for changes... ({})", count + 1));
        count = count + 1;
    }
    
    logger.info("Watch session completed");
    Ok(())
}

// Utility functions

async fn check_file_exists(path: string) -> Result<bool, string> {
    match access(path, F_OK).await {
        Ok(_) => Ok(true),
        Err(_) => Ok(false),
    }
}

async fn ensure_directory_exists(path: string) -> Result<(), string> {
    let exists = check_file_exists(path.clone()).await?;
    if !exists {
        mkdir(path, { recursive: true }).await?;
    }
    Ok(())
}

async fn await_timeout(ms: int) -> () {
    // Simulate setTimeout - in practice would use actual Node.js setTimeout
    // This is a placeholder for demonstration
}

fn parse_args(argv: Vec<string>) -> Result<CliArgs, string> {
    // Simple argument parsing - in practice would use a proper CLI library
    if argv.len() < 3 {
        return Ok(CliArgs { command: Command::Help });
    }
    
    let command = argv[2].clone();
    
    match command.as_str() {
        "process" => {
            if argv.len() < 5 {
                return Err("process command requires input and output paths");
            }
            let input = argv[3].clone();
            let output = argv[4].clone();
            let options = ProcessingOptions::default();
            Ok(CliArgs {
                command: Command::Process { input, output, options }
            })
        },
        "analyze" => {
            if argv.len() < 4 {
                return Err("analyze command requires a path");
            }
            let path = argv[3].clone();
            Ok(CliArgs {
                command: Command::Analyze { path }
            })
        },
        "watch" => {
            if argv.len() < 4 {
                return Err("watch command requires a directory path");
            }
            let directory = argv[3].clone();
            Ok(CliArgs {
                command: Command::Watch { directory }
            })
        },
        "help" | "--help" | "-h" => {
            Ok(CliArgs { command: Command::Help })
        },
        _ => {
            Err(format!("Unknown command: {}", command))
        }
    }
}

fn show_help() {
    println("Husk CLI File Processor");
    println("");
    println("Usage:");
    println("  husk-cli process <input> <output>  Process files from input to output");
    println("  husk-cli analyze <path>           Analyze directory contents");
    println("  husk-cli watch <directory>        Watch directory for changes");
    println("  husk-cli help                     Show this help message");
    println("");
    println("Examples:");
    println("  husk-cli process ./src ./dist");
    println("  husk-cli analyze ./project");
    println("  husk-cli watch ./src");
}

struct DirectoryAnalysis {
    total_files: int,
    total_directories: int,
    total_size: int,
    file_types: Map<string, int>,
}

impl DirectoryAnalysis {
    fn new() -> DirectoryAnalysis {
        DirectoryAnalysis {
            total_files: 0,
            total_directories: 0,
            total_size: 0,
            file_types: Map::new(),
        }
    }
    
    fn add_file(&mut self, extension: string, size: int) {
        self.total_files = self.total_files + 1;
        self.total_size = self.total_size + size;
        
        let current_count = self.file_types.get(extension.clone()).unwrap_or(0);
        self.file_types.insert(extension, current_count + 1);
    }
    
    fn add_directory(&mut self) {
        self.total_directories = self.total_directories + 1;
    }
}

fn print_analysis_results(analysis: DirectoryAnalysis, logger: &Logger) {
    logger.info("Directory Analysis Results:");
    logger.info(format!("  Total files: {}", analysis.total_files));
    logger.info(format!("  Total directories: {}", analysis.total_directories));
    logger.info(format!("  Total size: {} bytes", analysis.total_size));
    
    if !analysis.file_types.is_empty() {
        logger.info("  File types:");
        for (ext, count) in analysis.file_types {
            let display_ext = if ext.len() == 0 { "(no extension)" } else { ext };
            logger.info(format!("    {}: {} files", display_ext, count));
        }
    }
}